" plugins defined in .vim/init.vim using minpac
" this contains plugin specific setup and keybindings

" Plugin: nvim-telescope
nnoremap <c-p> :Telescope git_files<cr>
nnoremap <Leader>ff :Telescope find_files<cr>
nnoremap <Leader>b :Telescope buffers<cr>
nnoremap <Leader>r :Telescope live_grep<cr>
nnoremap <Leader>fb :Telescope file_browser<cr>
nnoremap <Leader>fs :lua require('telescope.builtin').grep_string({ search = vim.fn.input('Grep For > ') })<cr>

" Plugin: dirvish
let g:loaded_netrwPlugin = 1
let g:dirvish_relative_paths = 0
command! -nargs=? -complete=dir Explore Dirvish <args>
command! -nargs=? -complete=dir Sexplore belowright split | silent Dirvish <args>
command! -nargs=? -complete=dir Vexplore leftabove vsplit | silent Dirvish <args>

" Plugin: vim-jsx
let g:jsx_ext_required = 0

"Plugin: Fugitive
nnoremap <Leader>gc :Git commit<Cr>

let g:dashboard_default_executive ='telescope'
let g:dashboard_custom_header = [
\ ' ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó',
\ ' ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë',
\ ' ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë',
\ ' ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë',
\ ' ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë',
\ ' ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù',
\]

let g:dashboard_custom_footer=[
  \'    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†§‚†ñ‚†ö‚¢â‚£©‚£≠‚°≠‚†õ‚†ì‚†≤‚†¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
  \'    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Å‚†Ä‚†Ä‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
  \'    ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†É‚¢Ä‚°¥‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£Ü‚†Ä‚†Ä‚†Ä  ',
  \'    ‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Å‚£†‚†ã‚†Ä‚†à‚¢ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚†Ä‚†Ä  ',
  \'    ‚†Ä‚†Ä‚†Ä‚£∏‚†Å‚¢∞‚†É‚†Ä‚†Ä‚†Ä‚†à‚¢£‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£á‚†Ä  ',
  \'    ‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°æ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£π‚£Ü‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä  ',
  \'    ‚†Ä‚†Ä‚¢∏‚†É‚¢Ä‚£á‚°à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ë‚¢Ñ‚°Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á  ',
  \'    ‚†Ä‚†Ä‚¢∏‚†Ä‚¢ª‚°ü‚°ª‚¢∂‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚†ü‚°≥‚¢ø‚£¶‚°ë‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á  ',
  \'    ‚†Ä‚†Ä‚£∏‚†Ä‚¢∏‚†É‚°á‚¢Ä‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚†Ä‚†Ä‚†à‚£ø‚°ó‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å  ',
  \'    ‚†Ä‚†Ä‚°è‚†Ä‚£º‚†Ä‚¢≥‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚£Ä‚£Ä‚†î‚£∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ü‚†Ä  ',
  \'    ‚†Ä‚†Ä‚°á‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†É‚†Ä  ',
  \'    ‚†Ä‚¢∏‚†É‚†ò‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†Ä‚†Ä  ',
  \'    ‚†Ä‚£∏‚†Ä‚†Ä‚†π‚°Ñ‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä  ',
  \'    ‚†Ä‚°è‚†Ä‚†Ä‚†Ä‚†ô‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚¢∂‚°á‚†Ä‚†Ä‚¢∞‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä  ',
  \'    ‚¢∞‚†á‚°Ñ‚†Ä‚†Ä‚†Ä‚°ø‚¢£‚£Ä‚£Ä‚£Ä‚°§‚†¥‚°û‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚†Ä‚†Ä  ',
  \'    ‚£∏‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢Ä‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚¢∏‚†Ä‚†Ä  ',
  \'    ‚£ø‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†§‚†∂‚†∂‚†æ‚†§‚†Ñ‚¢∏‚†Ä‚°Ä‚†∏‚£ø‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£á‚†Ä  ',
  \'    ‚°á‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°å‚£µ‚°Ä‚¢≥‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°Ä  ',
  \'    ‚°á‚†Ä‚†á‚†Ä‚†Ä‚°á‚°∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†Æ‚¢ß‚£Ä‚£ª‚¢Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ß  ',
  \'    ‚£á‚†Ä‚¢†‚†Ä‚†Ä‚¢≥‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°é‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò  ',
\]

nnoremap <silent> <Leader>fh :DashboardFindHistory<CR>
nnoremap <silent> <Leader>ff :DashboardFindFile<CR>
nnoremap <silent> <Leader>tc :DashboardChangeColorscheme<CR>
nnoremap <silent> <Leader>fa :DashboardFindWord<CR>
nnoremap <silent> <Leader>fb :DashboardJumpMark<CR>
nnoremap <silent> <Leader>cn :DashboardNewFile<CR>

" Plugin: Lightline
" currently using lightline: https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'moonfly',
      \ 'component': {
      \   'lineinfo': 'üìÑ %3l:%-2v',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileencoding', 'filetype'] ]
      \ },
      \ 'inactive': {
      \   'left': [ [ 'parentDirAndFilename' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'LightLineGitBranch',
      \   'parentDirAndFilename': 'LightLineFilename'
      \ }
    \ }
" requires vim fugitive wrapper
function! LightLineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" get branch name from vim-fugitive
function! LightLineGitBranch()
  let l:branch = fugitive#head()
  return l:branch ==# '' ? '' : 'üî® ' . l:branch
endfunction

" Plugin: markdown-preview.nvim
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_browser = 'chrome'
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false
    \ }

let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_echo_preview_url = 1 
let g:mkdp_port = '8881'
let g:mkdp_page_title = '„Äå${name}„Äç'

" Plugin: vim-jsx-pretty
let g:vim_jsx_pretty_template_tags = ['html', 'js', 'jsx']
let g:vim_jsx_pretty_highlight_close_tag = 1
let g:vim_jsx_pretty_colorful_config = 1


" Plugin: diagnostic-nvim 
let g:diagnostic_enable_virtual_text = 1
let g:diagnostic_insert_delay = 1
" TODO -- we might be able to define diagnotics & virtual text prefix here, in
" viml for now
call sign_define("LspDiagnosticsErrorSign", {"text" : "‚úò", "texthl" : "LspDiagnosticsError"})
call sign_define("LspDiagnosticsWarningSign", {"text": "‚ö†Ô∏è "}) 
call sign_define("LspDiagnosticsInformationSign", {"text": "üí¨"}) 
call sign_define("LspDiagnosticsHintSign", {"text": "‚ñ∂Ô∏è "})

" Plugin: lspsaga.vim
nnoremap <silent>gh :Lspsaga lsp_finder<CR>
nnoremap <silent>K :Lspsaga hover_doc<CR>
nnoremap <silent>gs :Lspsaga signature_help<CR>
nnoremap <silent>gr :Lspsaga rename<CR>
nnoremap <silent>gd :Lspsaga preview_definition<CR>
nnoremap <silent>gl :Lspsaga show_line_diagnostics<CR>
nnoremap <silent>ca :Lspsaga code_action<CR>
